for (colN in columnName) {
data[[colN]] <- tolower(data[[colN]])
}
cleanHtmlStringFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
for (i in 1: nrow(data)){
print(i)
data$body[i] <- (cleanHtmlStringFun(data$body[i]))
data$body[i] <- gsub("[[:punct:]]", "", data$body[i] )
data$body[i] <- gsub("[[:cntrl:]]", " ", data$body[i] )
data$body[i] <- str_squish(data$body[i])
}
write.csv(data, file ="D:\\DS\\Assignment5.csv")
data$body <- lapply(data$body,function(x) gsub("[[:punct:]]", " ",x))
data$body[3531]
tokenize_word_stems(data$body, language = "english", stopwords = NULL, simplify = FALSE)
tokenize_word_stems(data$body, language = "english", stopwords = NULL, simplify = FALSE)
wordStem(data$body,language = "english")
install.packages("SnowballC")
library(SnowballC)
wordStem(data$body[1],language = "english")
stemDocument(data$body[1])
getStemLanguages()
wordStem(data$body[1])
wordStem(data$body[1],language = "english")
wordStem(words,language = "english"
)
data_Corpus <- Corpus(VectorSource(data$body[1]))
libraray(tm)
install.packages("tm")
library(tm)
install.packages("SnowballC")
library(SnowballC)`
hjasgd]
asdkasd
)
)
>
break(break())
library(SnowballC)
library(tm)
wordStem(words,language = "english")
wordStem(words, language = "english")
install.packages(NLP)
install.packages("NLP")
install.packages("NLP")
library(tm)
wordStem(words,language = "english")
install.packages("SnowballC")
library(SnowballC)
wordStem(words,language = "english")
wordStem(words,language = "english")
getStemLanguages()
wordStem()
wordStem(words(),language = "english")
wordStem(words,language = "english")
wordStem(data$body[1],language = "english")
gsub("[[\"]]","",data$body[1])
req <- fromJSON(paste0(url,("&order-by=newest&show-fields=body&page-size="),pageSize,("&page="),i,("&section="),item,("&api-key="),api_key), flatten = TRUE)
for (item in sections)
{
for (i in 1:20)
{
req <- fromJSON(paste0(url,("&order-by=newest&show-fields=body&page-size="),pageSize,("&page="),i,("&section="),item,("&api-key="),api_key), flatten = TRUE)
}
}
library(rjson)
library(jsonlite)
library(plyr)
library(dplyr)
library(stringr)
#Api Key
api_key<-"d38d159c-3ed5-43b2-9caa-1eed5c665b7e"
url <- "https://content.guardianapis.com/search?"
pageSize<-50
sections<- c("sport", "artanddesign", "business", "culture","technology","world")
data = data.frame()
for (item in sections)
{
for (i in 1:20)
{
req <- fromJSON(paste0(url,("&order-by=newest&show-fields=body&page-size="),pageSize,("&page="),i,("&section="),item,("&api-key="),api_key), flatten = TRUE)
}
}
library(httr)
library(rjson)
library(jsonlite)
library(plyr)
library(dplyr)
library(stringr)
#Api Key
api_key<-"d38d159c-3ed5-43b2-9caa-1eed5c665b7e"
url <- "https://content.guardianapis.com/search?"
pageSize<-50
sections<- c("sport", "artanddesign", "business", "culture","technology","world")
data = data.frame()
for (item in sections)
{
for (i in 1:20)
{
req <- fromJSON(paste0(url,("&order-by=newest&show-fields=body&page-size="),pageSize,("&page="),i,("&section="),item,("&api-key="),api_key))
test <- req$response$results$fields
req$response$results$fields <- NULL
if("body" %in% colnames(req$response$results) ){
req$response$results <- rbind(req$response$results,test)
}else{
req$response$results <- cbind(req$response$results,test)
}
data <- rbind(data,req$response$results)
}
}
data$type <-NULL
data$webPublicationDate <-NULL
data$webUrl <-NULL
data$webUrl <-NULL
data$apiUrl<-NULL
data$isHosted <-NULL
data$pillarId <-NULL
data$pillarName<-NULL
data$sectionName <-NULL
data %>%
group_by(data$sectionId) %>%
summarise((count = n()))
for (col in colnames(data)){
Encoding(data[[col]]) <- "UTF-8"}
gsub("\"","",data$body[1])
gsub("\"\'","",data$body[1])
data$type <-NULL
data$webPublicationDate <-NULL
data$webUrl <-NULL
data$webUrl <-NULL
data$apiUrl<-NULL
data$isHosted <-NULL
data$pillarId <-NULL
data$pillarName<-NULL
data$sectionName <-NULL
data %>%
group_by(data$sectionId) %>%
summarise((count = n()))
for (col in colnames(data)){
Encoding(data[[col]]) <- "UTF-8"}
# Storing the data in the csv file
write.csv(data, file ="D:\\DS\\Assignment5.csv")
str_replace_all(string = data$body[1], pattern = '"', replacement = "")
# Converting all the column data to lowercase :
columnName <- colnames(data)
for (colN in columnName) {
data[[colN]] <- tolower(data[[colN]])
}
cleanHtmlStringFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
for (i in 1: nrow(data)){
print(i)
data$body[i] <- (cleanHtmlStringFun(data$body[i]))
data$body[i] <- gsub("[[:punct:]]", "", data$body[i] )
data$body[i] <- gsub("[[:cntrl:]]", " ", data$body[i] )
data$body[i] <- str_squish(data$body[i])
}
data$body[1]
grep("\", data$body[1], value = TRUE)
for (i in 1: nrow(data)){
print(i)
data$body[i] <- (cleanHtmlStringFun(data$body[i]))
data$body[i] <- gsub("[[:punct:]]", "", data$body[i] )
data$body[i] <- gsub("[[:cntrl:]]", " ", data$body[i] )
data$body[i] <- str_squish(data$body[i])
}
grep("\", data$body[1], value = TRUE)
for (i in 1: nrow(data)){
print(i)
data$body[i] <- (cleanHtmlStringFun(data$body[i]))
data$body[i] <- gsub("[[:punct:]]", "", data$body[i] )
data$body[i] <- gsub("[[:cntrl:]]", " ", data$body[i] )
data$body[i] <- str_squish(data$body[i])
}
grep("[[:punct:]]", levels(data$body[1]), value = TRUE)
grep("[[:punct:]]", levels(data$body[1]), value = TRUE)
sub(pattern = "\\"", replacement = "", data$body[1])
grep("[[\\"]]", levels(data$body[1]), value = TRUE)
data$sectionName <-NULL
View(data)
gsub("[[\\"]]", " ", data$body[i] )
gsub("\"",data$body[1])
gsub("\"","",data$body[1])
gsub("\\"","",data$body[1])
gsub("\'","****",data$body[1])
grep(pattern = "[[:punct:]]", levels(data$body[1]), value = TRUE)
gsub(pattern =  "[[:punct:]]", replacement = "", levels(data$body[1]))
stings <- "Welcome to: Introd'asduiasdh l: " asjd,h asdaui9osd asdn"
stings <- "Welcome to: Introd\'asduiasdh l: \" asjd,h asdaui9osd asdn"
gsub(pattern =  "[[:punct:]]", replacement = "", stings)
data$body <- lapply(data$body,function(x) gsub("[[:punct:]]", " ",x))
data$body[1432]
gsub(pattern =  "[^[:alnum:]] ", replacement = "", data$body[1432])
type(data$body)
sapply(data, class)
test <- as.data.frame(req$response$results$fields,flatten = TRUE)
source('~/1.R')
library(httr)
library(rjson)
library(jsonlite)
library(plyr)
library(dplyr)
library(stringr)
#Api Key
api_key<-"d38d159c-3ed5-43b2-9caa-1eed5c665b7e"
url <- "https://content.guardianapis.com/search?"
pageSize<-50
sections<- c("sport", "artanddesign", "business", "culture","technology","world")
data = data.frame()
for (item in sections)
{
for (i in 1:20)
{
req <- fromJSON(paste0(url,("&order-by=newest&show-fields=body&page-size="),pageSize,("&page="),i,("&section="),item,("&api-key="),api_key))
test <- as.data.frame(req$response$results$fields,flatten = TRUE)
req$response$results$fields <- NULL
if("body" %in% colnames(req$response$results) ){
req$response$results <- rbind(req$response$results,test)
}else{
req$response$results <- cbind(req$response$results,test)
}
data <- rbind(data,req$response$results)
}
}
data$type <-NULL
data$webPublicationDate <-NULL
data$webUrl <-NULL
data$webUrl <-NULL
data$apiUrl<-NULL
data$isHosted <-NULL
data$pillarId <-NULL
data$pillarName<-NULL
data$sectionName <-NULL
data %>%
group_by(data$sectionId) %>%
summarise((count = n()))
sapply(data, class)
columnName <- colnames(data)
for (colN in columnName) {
data[[colN]] <- tolower(data[[colN]])
}
cleanHtmlStringFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
for (i in 1: nrow(data)){
print(i)
data$body[i] <- (cleanHtmlStringFun(data$body[i]))
data$body[i] <- gsub("[[:punct:]]", "", data$body[i] )
data$body[i] <- gsub("[[:cntrl:]]", " ", data$body[i] )
data$body[i] <- str_squish(data$body[i])
}
data$body[1232]
data$body <- lapply(data$body,function(x) gsub(pattern = "[[:punct:]]", " ",x))
data$body[1232]
View(data)
getwd()
setwd("D:/ML/Project")
getwd()
getdat = function(dat,name){
library(stringr)
# Split up pick up times and drop off times into dummy variables of 4 time zones
k = str_split_fixed(dat$tpep_pickup_datetime, " ", Inf)
j = str_split_fixed(k[,2], ":", Inf)
l = j[,1]
l = as.numeric(l)
pt1 = rep(0,length(l));pt2 = rep(0,length(l));pt3 = rep(0,length(l));pt4 = rep(0,length(l))
pt1[which(l<6)] = 1;pt2[which(l>=6 & l<12)] = 1;pt3[which(l>=12 & l<18)] = 1;pt4[which(l>=18)] = 1
pt = cbind(pt1,pt2,pt3,pt4)
k = str_split_fixed(dat$tpep_dropoff_datetime, " ", Inf)
j = str_split_fixed(k[,2], ":", Inf)
l = j[,1]
l = as.numeric(l)
dt1 = rep(0,length(l));dt2 = rep(0,length(l));dt3 = rep(0,length(l));dt4 = rep(0,length(l))
dt1[which(l<6)] = 1;dt2[which(l>=6 & l<12)] = 1;dt3[which(l>=12 & l<18)] = 1;dt4[which(l>=18)] = 1
dt = cbind(dt1,dt2,dt3,dt4)
# Categorize into one of the four seasons
dat$tpep_dropoff_datetime <- str_replace_all(dat$tpep_dropoff_datetime,"/","-")
View(dat)
a = str_split_fixed(dat$tpep_dropoff_datetime, "-", Inf)
i = a[,2]
i = as.numeric(i)
szn1 = rep(0,length(i));szn2 = rep(0,length(i));szn3 = rep(0,length(i));szn4 = rep(0,length(i))
szn1[which(a<=2 & a == 12)] = 1;szn2[which(a>=3 & a<=5)] = 1
szn3[which(a>=6 & a<=8)] = 1;szn4[which(a>=9 & a<=11)] = 1
szn = cbind(szn1,szn2,szn3,szn4)
# Convert dates into weekdays
k = str_split_fixed(dat$tpep_dropoff_datetime, " ", Inf)
l = k[,1]
r = weekdays(as.Date(l))
sun = rep(0,length(r));mon = rep(0,length(r));tues = rep(0,length(r));wed = rep(0,length(r));
thurs = rep(0,length(r));fri = rep(0,length(r));sat = rep(0,length(r))
sun[which(r == "Sunday")] = 1
mon[which(r == "Monday")] = 1
tues[which(r == "Tuesday")] = 1
wed[which(r == "Wednesday")] = 1
thurs[which(r == "Thursday")] = 1
fri[which(r == "Friday")] = 1
sat[which(r == "Saturday")] = 1
day = cbind(sun,mon,tues,wed,thurs,fri,sat)
bind = cbind(dat,szn,day,pt,dt)
bind = bind[,-1]
#write.csv(bind, file = name)
return(bind)
}
dat = read.csv("training_data/jan_2017.csv")
dat = read.csv("/training_data/jan_2017.csv")
dat = read.csv("~/training_data/jan_2017.csv")
dat = read.csv("./training_data/jan_2017.csv")
getwd()
dat = read.csv("/570 project/training_data/jan_2017.csv")
dat = read.csv("/570_project/training_data/jan_2017.csv")
dat = read.csv("./570_project/training_data/jan_2017.csv")
getdat = function(dat,name){
library(stringr)
# Split up pick up times and drop off times into dummy variables of 4 time zones
k = str_split_fixed(dat$tpep_pickup_datetime, " ", Inf)
j = str_split_fixed(k[,2], ":", Inf)
l = j[,1]
l = as.numeric(l)
pt1 = rep(0,length(l));pt2 = rep(0,length(l));pt3 = rep(0,length(l));pt4 = rep(0,length(l))
pt1[which(l<6)] = 1;pt2[which(l>=6 & l<12)] = 1;pt3[which(l>=12 & l<18)] = 1;pt4[which(l>=18)] = 1
pt = cbind(pt1,pt2,pt3,pt4)
k = str_split_fixed(dat$tpep_dropoff_datetime, " ", Inf)
j = str_split_fixed(k[,2], ":", Inf)
l = j[,1]
l = as.numeric(l)
dt1 = rep(0,length(l));dt2 = rep(0,length(l));dt3 = rep(0,length(l));dt4 = rep(0,length(l))
dt1[which(l<6)] = 1;dt2[which(l>=6 & l<12)] = 1;dt3[which(l>=12 & l<18)] = 1;dt4[which(l>=18)] = 1
dt = cbind(dt1,dt2,dt3,dt4)
# Categorize into one of the four seasons
dat$tpep_dropoff_datetime <- str_replace_all(dat$tpep_dropoff_datetime,"/","-")
View(dat)
a = str_split_fixed(dat$tpep_dropoff_datetime, "-", Inf)
i = a[,2]
i = as.numeric(i)
szn1 = rep(0,length(i));szn2 = rep(0,length(i));szn3 = rep(0,length(i));szn4 = rep(0,length(i))
szn1[which(a<=2 & a == 12)] = 1;szn2[which(a>=3 & a<=5)] = 1
szn3[which(a>=6 & a<=8)] = 1;szn4[which(a>=9 & a<=11)] = 1
szn = cbind(szn1,szn2,szn3,szn4)
# Convert dates into weekdays
k = str_split_fixed(dat$tpep_dropoff_datetime, " ", Inf)
l = k[,1]
r = weekdays(as.Date(l))
sun = rep(0,length(r));mon = rep(0,length(r));tues = rep(0,length(r));wed = rep(0,length(r));
thurs = rep(0,length(r));fri = rep(0,length(r));sat = rep(0,length(r))
sun[which(r == "Sunday")] = 1
mon[which(r == "Monday")] = 1
tues[which(r == "Tuesday")] = 1
wed[which(r == "Wednesday")] = 1
thurs[which(r == "Thursday")] = 1
fri[which(r == "Friday")] = 1
sat[which(r == "Saturday")] = 1
day = cbind(sun,mon,tues,wed,thurs,fri,sat)
bind = cbind(dat,szn,day,pt,dt)
bind = bind[,-1]
#write.csv(bind, file = name)
return(bind)
}
dat = read.csv("./570_project/training_data/jan_2017.csv")
new = getdat(dat,"jan_2017.csv")
getdat = function(dat,name){
library(stringr)
# Split up pick up times and drop off times into dummy variables of 4 time zones
k = str_split_fixed(dat$tpep_pickup_datetime, " ", Inf)
j = str_split_fixed(k[,2], ":", Inf)
l = j[,1]
l = as.numeric(l)
pt1 = rep(0,length(l));pt2 = rep(0,length(l));pt3 = rep(0,length(l));pt4 = rep(0,length(l))
pt1[which(l<6)] = 1;pt2[which(l>=6 & l<12)] = 1;pt3[which(l>=12 & l<18)] = 1;pt4[which(l>=18)] = 1
pt = cbind(pt1,pt2,pt3,pt4)
k = str_split_fixed(dat$tpep_dropoff_datetime, " ", Inf)
j = str_split_fixed(k[,2], ":", Inf)
l = j[,1]
l = as.numeric(l)
dt1 = rep(0,length(l));dt2 = rep(0,length(l));dt3 = rep(0,length(l));dt4 = rep(0,length(l))
dt1[which(l<6)] = 1;dt2[which(l>=6 & l<12)] = 1;dt3[which(l>=12 & l<18)] = 1;dt4[which(l>=18)] = 1
dt = cbind(dt1,dt2,dt3,dt4)
# Categorize into one of the four seasons
dat$tpep_dropoff_datetime <- str_replace_all(dat$tpep_dropoff_datetime,"/","-")
View(dat)
a = str_split_fixed(dat$tpep_dropoff_datetime, "-", Inf)
i = a[,2]
i = as.numeric(i)
szn1 = rep(0,length(i));szn2 = rep(0,length(i));szn3 = rep(0,length(i));szn4 = rep(0,length(i))
szn1[which(a<=2 & a == 12)] = 1;szn2[which(a>=3 & a<=5)] = 1
szn3[which(a>=6 & a<=8)] = 1;szn4[which(a>=9 & a<=11)] = 1
szn = cbind(szn1,szn2,szn3,szn4)
# Convert dates into weekdays
k = str_split_fixed(dat$tpep_dropoff_datetime, " ", Inf)
l = k[,1]
r = weekdays(as.Date(l))
sun = rep(0,length(r));mon = rep(0,length(r));tues = rep(0,length(r));wed = rep(0,length(r));
thurs = rep(0,length(r));fri = rep(0,length(r));sat = rep(0,length(r))
sun[which(r == "Sunday")] = 1
mon[which(r == "Monday")] = 1
tues[which(r == "Tuesday")] = 1
wed[which(r == "Wednesday")] = 1
thurs[which(r == "Thursday")] = 1
fri[which(r == "Friday")] = 1
sat[which(r == "Saturday")] = 1
day = cbind(sun,mon,tues,wed,thurs,fri,sat)
bind = cbind(dat,szn,day,pt,dt)
bind = bind[,-1]
#write.csv(bind, file = name)
return(bind)
}
dat = read.csv("./570_project/training_data/jan_2017.csv")
new = getdat(dat,"jan_2017.csv")
View(dat)
getdat = function(dat,name){
library(stringr)
# Split up pick up times and drop off times into dummy variables of 4 time zones
k = str_split_fixed(dat$tpep_dropoff_datetime, " ", Inf)
j = str_split_fixed(k[,2], ":", Inf)
l = j[,1]
l = as.numeric(l)
pt1 = rep(0,length(l));pt2 = rep(0,length(l));pt3 = rep(0,length(l));pt4 = rep(0,length(l))
pt1[which(l<6)] = 1;pt2[which(l>=6 & l<12)] = 1;pt3[which(l>=12 & l<18)] = 1;pt4[which(l>=18)] = 1
pt = cbind(pt1,pt2,pt3,pt4)
k = str_split_fixed(dat$tpep_dropoff_datetime, " ", Inf)
j = str_split_fixed(k[,2], ":", Inf)
l = j[,1]
l = as.numeric(l)
dt1 = rep(0,length(l));dt2 = rep(0,length(l));dt3 = rep(0,length(l));dt4 = rep(0,length(l))
dt1[which(l<6)] = 1;dt2[which(l>=6 & l<12)] = 1;dt3[which(l>=12 & l<18)] = 1;dt4[which(l>=18)] = 1
dt = cbind(dt1,dt2,dt3,dt4)
# Categorize into one of the four seasons
dat$tpep_dropoff_datetime <- str_replace_all(dat$tpep_dropoff_datetime,"/","-")
View(dat)
a = str_split_fixed(dat$tpep_dropoff_datetime, "-", Inf)
i = a[,2]
i = as.numeric(i)
szn1 = rep(0,length(i));szn2 = rep(0,length(i));szn3 = rep(0,length(i));szn4 = rep(0,length(i))
szn1[which(a<=2 & a == 12)] = 1;szn2[which(a>=3 & a<=5)] = 1
szn3[which(a>=6 & a<=8)] = 1;szn4[which(a>=9 & a<=11)] = 1
szn = cbind(szn1,szn2,szn3,szn4)
# Convert dates into weekdays
k = str_split_fixed(dat$tpep_dropoff_datetime, " ", Inf)
l = k[,1]
r = weekdays(as.Date(l))
sun = rep(0,length(r));mon = rep(0,length(r));tues = rep(0,length(r));wed = rep(0,length(r));
thurs = rep(0,length(r));fri = rep(0,length(r));sat = rep(0,length(r))
sun[which(r == "Sunday")] = 1
mon[which(r == "Monday")] = 1
tues[which(r == "Tuesday")] = 1
wed[which(r == "Wednesday")] = 1
thurs[which(r == "Thursday")] = 1
fri[which(r == "Friday")] = 1
sat[which(r == "Saturday")] = 1
day = cbind(sun,mon,tues,wed,thurs,fri,sat)
bind = cbind(dat,szn,day,pt,dt)
bind = bind[,-1]
#write.csv(bind, file = name)
return(bind)
}
dat = read.csv("./570_project/training_data/jan_2017.csv")
new = getdat(dat,"jan_2017.csv")
new = getdat(dat,"jan_2017.csv")
new = getdat(dat,"jan_2017.csv")
getdat = function(dat,name){
library(stringr)
# Split up pick up times and drop off times into dummy variables of 4 time zones
k = str_split_fixed(dat$tpep_dropoff_datetime, " ", Inf)
j = str_split_fixed(k[,2], ":", Inf)
l = j[,1]
l = as.numeric(l)
pt1 = rep(0,length(l));pt2 = rep(0,length(l));pt3 = rep(0,length(l));pt4 = rep(0,length(l))
pt1[which(l<6)] = 1;pt2[which(l>=6 & l<12)] = 1;pt3[which(l>=12 & l<18)] = 1;pt4[which(l>=18)] = 1
pt = cbind(pt1,pt2,pt3,pt4)
k = str_split_fixed(dat$tpep_dropoff_datetime, " ", Inf)
j = str_split_fixed(k[,2], ":", Inf)
l = j[,1]
l = as.numeric(l)
dt1 = rep(0,length(l));dt2 = rep(0,length(l));dt3 = rep(0,length(l));dt4 = rep(0,length(l))
dt1[which(l<6)] = 1;dt2[which(l>=6 & l<12)] = 1;dt3[which(l>=12 & l<18)] = 1;dt4[which(l>=18)] = 1
dt = cbind(dt1,dt2,dt3,dt4)
# Categorize into one of the four seasons
dat$tpep_dropoff_datetime <- str_replace_all(dat$tpep_dropoff_datetime,"/","-")
View(dat)
a = str_split_fixed(dat$tpep_dropoff_datetime, "-", Inf)
i = a[,2]
i = as.numeric(i)
szn1 = rep(0,length(i));szn2 = rep(0,length(i));szn3 = rep(0,length(i));szn4 = rep(0,length(i))
szn1[which(a<=2 & a == 12)] = 1;szn2[which(a>=3 & a<=5)] = 1
szn3[which(a>=6 & a<=8)] = 1;szn4[which(a>=9 & a<=11)] = 1
szn = cbind(szn1,szn2,szn3,szn4)
# Convert dates into weekdays
k = str_split_fixed(dat$tpep_dropoff_datetime, " ", Inf)
l = k[,1]
r = weekdays(as.Date(l))
sun = rep(0,length(r));mon = rep(0,length(r));tues = rep(0,length(r));wed = rep(0,length(r));
thurs = rep(0,length(r));fri = rep(0,length(r));sat = rep(0,length(r))
sun[which(r == "Sunday")] = 1
mon[which(r == "Monday")] = 1
tues[which(r == "Tuesday")] = 1
wed[which(r == "Wednesday")] = 1
thurs[which(r == "Thursday")] = 1
fri[which(r == "Friday")] = 1
sat[which(r == "Saturday")] = 1
day = cbind(sun,mon,tues,wed,thurs,fri,sat)
bind = cbind(dat,szn,day,pt,dt)
bind = bind[,-1]
#write.csv(bind, file = name)
return(bind)
}
dat = read.csv("./570_project/training_data/jan_2017.csv")
new = getdat(dat,"jan_2017.csv")
debugSource('D:/ML/Project/getnewdat.R', echo=TRUE)
typeof(dat$tpep_dropoff_datetime)
